<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Ascetic.m]]></title>
  <link href="http://Asceticm.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://Asceticm.github.com/"/>
  <updated>2013-03-23T14:45:41+08:00</updated>
  <id>http://Asceticm.github.com/</id>
  <author>
    <name><![CDATA[Ascetic.m]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim配置]]></title>
    <link href="http://Asceticm.github.com/blog/2012/11/25/vim-plugin/"/>
    <updated>2012-11-25T13:53:00+08:00</updated>
    <id>http://Asceticm.github.com/blog/2012/11/25/vim-plugin</id>
    <content type="html"><![CDATA[<p>本篇文章介绍VIM如何配置和一些优秀的VIM插件。</p>

<p>VIM的使用因人而异，每个人有每个人的使用习惯，所以配置文件还需要各位自己参考别人的配置文件，最终写出适合自己的配置文件。否则，即使配置文件再强大，也发挥不了作用。</p>

<p>网上流传一份<a href="http://www.amix.dk/vim/vimrc.html">史上最强VIM配置文件(html高亮版)</a>，这里有<a href="http://www.amix.dk/vim/vimrc.txt">纯txt版</a>。我的配置文件也是从中修改过来的，具有很好的参考价值。</p>

<p>当然，你还可以参考<a href="https://github.com/humiaozuzu/dot-vimrc">这里</a>，里面涵盖了不少插件的配置，我的自动补全就是从这里借鉴的。</p>

<!-- more -->

<p>这里重点讲几点：</p>

<h2 id="section">字体及主题推荐</h2>

<p>推荐的编程字体为DejaVu Sans Mono，推荐的自带colorscheme koehler，当然可以去下载网上的其他颜色方案，自己看着爽就好了。</p>

<h2 id="windows">关于Windows乱码的解决</h2>

<p>此处参考VIMIM给出的解决方法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>
</span><span class='line'><span class="k">if</span> <span class="k">g</span>:iswindows<span class="p">==</span><span class="m">1</span>
</span><span class='line'><span class="k">set</span> <span class="nb">termencoding</span><span class="p">=</span>GBK
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">set</span> <span class="nb">termencoding</span><span class="p">=</span>utf<span class="m">-8</span>
</span><span class='line'>    <span class="k">endif</span>
</span><span class='line'>    <span class="k">set</span> <span class="nb">fileencoding</span><span class="p">=</span>utf<span class="m">-8</span>
</span><span class='line'>    <span class="k">set</span> fileencodingileencodings<span class="p">=</span>ucs<span class="p">-</span>bom<span class="p">,</span>utf<span class="m">-8</span><span class="p">,</span>cp936<span class="p">,</span>gb18030<span class="p">,</span>big5<span class="p">,</span>euc<span class="p">-</span>jp<span class="p">,</span>euc<span class="p">-</span>kr<span class="p">,</span>latin1
</span><span class='line'>    <span class="k">set</span> <span class="nb">langmenu</span><span class="p">=</span>zh_CN.utf<span class="m">-8</span>
</span><span class='line'>    source $VIMRUNTIME/delmenu.<span class="k">vim</span>
</span><span class='line'>    source $VIMRUNTIME/menu.<span class="k">vim</span>
</span><span class='line'>    <span class="k">language</span> <span class="k">messages</span> zh_cn.utf<span class="m">-8</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="section-1">底部状态栏的修改</h2>

<p>上面的配置文件的状态栏只能显示所在行，我们可以添加上所在列。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>    <span class="k">set</span> <span class="nb">statusline</span><span class="p">=</span>\ %{HasPaste<span class="p">()</span>}%F%<span class="k">m</span>%<span class="k">r</span>%<span class="k">h</span>\ %<span class="k">w</span>\ \ CWD:\ %<span class="k">r</span>%{getcwd<span class="p">()</span>}%<span class="k">h</span>\ \ \ POS:\ %<span class="k">l</span><span class="p">,</span>%<span class="k">v</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="vimstrong">VIM插件&lt;/strong&gt;</h2>

<ul>
  <li>
    <p>插件管理：</p>

    <p>这里推荐使用Vundle(https://github.com/gmarik/vundle)来管理VIM插件，非常方便与实用，只需要在配置文件写一行就并执行命令，就可以实现插件的自动安装与卸载。</p>

    <ul>
      <li>首先，你需要安装git(此部分略去)。</li>
      <li>然后按照Vundle的说明执行就好了。</li>
    </ul>

    <p>在命令行下执行：</p>
  </li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<pre><code>然后按照说明在配置文件中写入下面部分(当然插件可以自己选了)：
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>               “ be iMproved
</span><span class='line'><span class="k">filetype</span> off                   “ required<span class="p">!&lt;</span>/<span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">p</span><span class="p">&gt;</span><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'><span class="k">call</span> vundle#rc<span class="p">()&lt;</span>/<span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">p</span><span class="p">&gt;</span>” <span class="k">let</span> Vundle manage Vundle
</span><span class='line'>“ required<span class="p">!</span>
</span><span class='line'>Bundle ‘gmarik<span class="sr">/vundle’&lt;/</span><span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">p</span><span class="p">&gt;</span>” My Bundles here:
</span><span class='line'>“
</span><span class='line'>“ original repos <span class="k">on</span> github
</span><span class='line'>Bundle ‘tpope/<span class="k">vim</span><span class="p">-</span>fugitive’
</span><span class='line'>Bundle ‘Lokaltog/<span class="k">vim</span><span class="p">-</span>easymotion’
</span><span class='line'>Bundle ‘rstacruz<span class="sr">/sparkup’, {‘rtp’: ‘vim/</span>’}
</span><span class='line'>Bundle ‘tpope/<span class="k">vim</span><span class="p">-</span>rails.git’
</span><span class='line'>“ <span class="k">vim</span><span class="p">-</span>scripts repos
</span><span class='line'>Bundle ‘L9’
</span><span class='line'>Bundle ‘FuzzyFinder’
</span><span class='line'>“ non github repos
</span><span class='line'>Bundle ‘git:<span class="sr">//</span>git.wincent.<span class="k">com</span>/command<span class="p">-</span><span class="k">t</span>.git’
</span><span class='line'>“ …<span class="p">&lt;</span>/<span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">p</span><span class="p">&gt;</span><span class="k">filetype</span> plugin indent <span class="k">on</span>     “ required<span class="p">!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<pre><code>然后在VIM中执行:BundleInstall，它就会自动帮你安装插件了。&lt;/li&gt;
</code></pre>

<ul>
  <li>
    <p>NerDTree:</p>

    <p>虽然说VIM自带文件管理的功能，但是比起NerDTree还是不够方便。推荐的NerDTree配置如下，快捷键映射为F7：</p>
  </li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> NERDTreeChDirMode<span class="p">=</span><span class="m">2</span>
</span><span class='line'><span class="k">let</span> NERDTreeWinSize<span class="p">=</span><span class="m">30</span>
</span><span class='line'><span class="k">let</span> NERDTreeWinPos <span class="p">=</span> “<span class="k">right</span>”
</span><span class='line'><span class="k">let</span> NERDTreeIgnore<span class="p">=</span>[’.<span class="k">vim</span>$’<span class="p">,</span> ‘\<span class="p">~</span>$’<span class="p">,</span> ‘.pyc$’<span class="p">,</span> ‘.swp$’]
</span><span class='line'><span class="k">let</span> NERDTreeSortOrder<span class="p">=</span>[‘^__.<span class="k">py</span>$’<span class="p">,</span> ‘\/$’<span class="p">,</span> ‘*’<span class="p">,</span> ‘.swp$’<span class="p">,</span>  ‘\<span class="p">~</span>$’]
</span><span class='line'>nmap <span class="p">&lt;</span>f7<span class="p">&gt;</span> :NERDTreeToggle<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></cr></f7></p>

<h2 id="section-2">自动补全：</h2>

<p>想必使用VIM码代码的人最需要的功能就是这个了吧，我使用的是neocomplcache+snipmate+supertab，借鉴了上面提到的配置文件，配置如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>“ neocomplcache<span class="p">&lt;</span>/<span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">p</span><span class="p">&gt;</span>” Use neocomplcache.
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplcache_enable_at_startup <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>“ Use <span class="nb">smartcase</span>.
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplcache_enable_smart_case <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>“ Use underbar completion.
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplcache_enable_underbar_completion <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplcache_disable_auto_complete<span class="p">=</span><span class="m">1</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplcache_min_syntax_length<span class="p">=</span><span class="m">3</span>
</span><span class='line'><span class="k">set</span> <span class="nb">completeopt</span><span class="p">-=</span>preview<span class="p">&lt;</span>/<span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">p</span><span class="p">&gt;</span>” SuperTab<span class="p">&lt;</span>/<span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">p</span><span class="p">&gt;</span><span class="k">let</span> <span class="k">g</span>:SuperTabRetainCompletiontype <span class="p">=</span> <span class="m">2</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:supertabdefaultcompletionType <span class="p">=</span> “<span class="p">&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">x</span><span class="p">&gt;&lt;</span><span class="k">c</span><span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>&quot;
</span></code></pre></td></tr></table></div></figure></notextile></div></c-u></c-x></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim进阶]]></title>
    <link href="http://Asceticm.github.com/blog/2012/11/24/vim-advanced/"/>
    <updated>2012-11-24T11:44:00+08:00</updated>
    <id>http://Asceticm.github.com/blog/2012/11/24/vim-advanced</id>
    <content type="html"><![CDATA[<p>仅仅学习了vim的基础操作并不能使你高效地使用vim编辑文档，你不仅需要知道各种tips，还需要有一个强有力的vimrc以及各种插件辅助。</p>

<p>我最初是阅读易水寒的<a href="http://easwy.com/blog/archives/advanced-vim-skills-catalog/">vi/vim使用进阶</a>系列文章，并根据自己的需要进行了取舍。</p>

<p>如果您是一名程序员，那么强烈建议你阅读
    user<em>29.txt Moving through programs
    user</em>30.txt Editing programs</p>

<p>这里还要推荐一篇的文章，Vim作者Bram Moolenaar写的<a href="http://www.moolenaar.net/habits.html">Seven habits of effective text editing</a>，这里有<a href="http://www.newsmth.net/bbscon.php?bid=731&amp;id=353">中文版</a>。</p>

<p>文章中强调了如何提高编辑文本效率的方法：</p>

<ul>
  <li>在进行编辑，主要重复进行的操作</li>
  <li>找出能快速进行这些操作的编辑命令</li>
  <li>进行练习，熟练为止</li>
</ul>

<p>其中还要注意一个误区：VIM中有着多种多样的操作命令，不要试图为一点小事找出完美的命令。</p>

<!-- more -->

<p>好了，下面进入正题。此篇文章主要介绍vim的一些进阶Tips。</p>

<h2 id="tip-1">Tip 1:快速移动定位</h2>

<ul>
  <li>
    <p>行内快速移动到指定字符：</p>

    <p><code>fx</code>,就会移动到光标右侧第一个x上；<code>Fx</code>，就会移动到光标左侧第一个x上。</p>
  </li>
  <li>
    <p>k 程序间的移动：</p>

    <p>在编写函数时，有时需要跳转到本函数的开头。使用<code>[[</code>命令，即可跳转到最外层的括号{处。同样还有一系列命令可以在注释，宏以及小括号之间移动，具体请参见29.3。</p>
  </li>
  <li>
    <p>重绘(光标所在行不变，屏幕重绘)：</p>

    <p>光标不动，并使其所在行处于窗口顶端：<code>z</code></p>

    <p>光标不动，并使其所在行处于窗口中部：<code>z.i</code></p>

    <p>光标不动，并使其所在行处于窗口底端：<code>z-</code></p>
  </li>
</ul>

<h2 id="tip-2strong">Tip 2:标签文件及使用：&lt;/strong&gt;</h2>

<ul>
  <li>
    <p>快速跳转：</p>

    <p>实现跳转需要使用标签文件，我们一般使用<a href="http://ctags.sourceforge.net/">Exuberant Ctags</a>。安装完成后，在你的项目目录下执行<code>Ctags -R</code>就会生成一个tags文件。进入vim后，找到你想要跳转的函数，然后按Ctrl+]即可跳转到函数的定义处。</p>

    <p>PS:如果你的项目有多个目录，那你需要在项目根目录下生成tags文件，进入vim后手动加载tags文件。<code>:set tag=../../tags</code></p>

    <p>也可以通过在vimrc中写入相关内容自动加载或者使用插件，不过还是推荐手动加载。</p>
  </li>
  <li>
    <p>函数预览及定位:</p>

    <ul>
      <li>当你在调用某一函数，却不知道形参类型时，Preview window刚好可以帮上忙。</li>
    </ul>

    <p><code>：ptag writer</code>,<code>CTRL-W }</code>这两个命令即可将函数的定义在预览窗口显示出来，前提是你加载了tag文件。</p>

    <p>关闭预览窗口的命令为<code>:pc</code>。</p>

    <ul>
      <li>如果你需要查看文件外的变量定义，可以使用<code>[I</code>，如果是查看宏定义的话，使用<code>[D</code>。</li>
    </ul>
  </li>
</ul>

<h2 id="tip-3">Tip 3:其他</h2>

<ul>
  <li>
    <p>缩进：</p>

    <p>有时候从其他文件复制过来的段落缩进十分混乱，vim中可以非常方便地调整缩进，选中需要调整的部分然后按<code>=</code></p>
  </li>
  <li>
    <p>区块编辑：</p>

    <p>有时候，你可能需要在几句代码之前添加<code>//</code>，以忽略这些语句。此时按<code>CTRL-v</code>进入块可视模式，从第一行行首向下移动到最后一行，然后按<code>I</code>，进入插入模式，输入<code>//</code>(注：此时只有一行显示改变)，然后<code>ESC</code>，修改就完成了。</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim初步]]></title>
    <link href="http://Asceticm.github.com/blog/2012/11/24/vim-basic/"/>
    <updated>2012-11-24T10:31:00+08:00</updated>
    <id>http://Asceticm.github.com/blog/2012/11/24/vim-basic</id>
    <content type="html"><![CDATA[<p>作为一个文本编辑器，Vim具有所有文本编辑器应有的功能，而且更有其他文本编辑器所无法比拟的特性。</p>

<p>本篇着重介绍VIM中最基本的功能，如果之前没有接触过VIM，建议阅读VIM自带的30分钟教程，直接在终端键入vimtutor，或者去安装目录中找vimtutor.bat。</p>

<p>如果实在不想看E文的帮助，<a href="http://vimcdoc.sourceforge.net/">这里</a>有中文的vimdoc。</p>

<p>VIM有着非常陡峭的学习曲线，所以请各位学习VIM的同志们保持耐心。</p>

<!-- more -->

<h2 id="section">三种模式</h2>

<p>VIM中常用的模式有三种：普通模式(normal)、插入模式(insert)、可视模式(visual)。</p>

<ul>
  <li>
    <p>普通模式：</p>

    <p>这种模式下可以执行一般的编辑器命令，移动光标、删除文本等，是VIM启动后的默认模式。可以说VIM强大的编辑能力很大程度上源于此模式。</p>
  </li>
  <li>
    <p>插入模式：</p>

    <p>此模式下，大部分按键都会向文本缓冲区中插入文本。&lt;/li&gt;</p>
  </li>
  <li>
    <p>可视模式：</p>

    <p>此模式下，移动光标可以选中文本，用于替换和复制等。&lt;/li&gt;&lt;/ul&gt;</p>
  </li>
</ul>

<p>PS:在VIM配置文件中键盘映射nmap,imap,vmap的映射分别对应三种模式。&lt;/li&gt;</p>

<h2 id="section-1">模式转换</h2>

<p>由普通模式进入插入模式有许多方法最常用的为以下几种：</p>

<ul>
  <li>在光标所在位置之前插入: <code>i</code></li>
  <li>在光标所在位置后插入：<code>a</code></li>
  <li>在本行行尾插入:<code>A</code></li>
  <li>在本行行首插入：<code>I</code></li>
  <li>替换当前光标所在字符：<code>r</code></li>
</ul>

<p>由Normal模式进入可视模式：</p>

<ul>
  <li>普通可视模式：<code>v</code></li>
  <li>块可视模式: <code>Ctrl+v</code></li>
  <li>返回普通模式：<code>Esc</code></li>
</ul>

<p>PS:VIM中大部分命令都有以下两种操作格式：</p>

<pre><code>[number] command object
command [number] object
</code></pre>

<p>其中第一个命令是进行number次命令，第二个命令是对number个对象进行command动作</p>

<h2 id="section-2">基础移动</h2>

<ul>
  <li>上下左右：<code>(count)kjhl</code></li>
  <li>上下翻页(一整页)：<code>CTRL-f</code>,<code>CRTL-b</code></li>
  <li>上下翻页(半页)：<code>CTRL-u</code>,<code>CTRL-d</code></li>
</ul>

<h2 id="section-3">移动进阶</h2>

<ul>
  <li>移动到行末：<code>$</code></li>
  <li>移动到行首：<code>0</code>，<code>^</code>(第一个字符)</li>
  <li>移动到下个单词词首：<code>w</code></li>
  <li>移动到上个单词词首：<code>b</code></li>
  <li>移动到下个单词词末：<code>E</code></li>
  <li>移动到上个单词词首：<code>e</code></li>
  <li>移动到文件开头：<code>gg</code></li>
  <li>移动到文件结束：<code>G</code></li>
</ul>

<h2 id="section-4">撤消与恢复</h2>

<ul>
  <li>撤消一次: <code>u</code></li>
  <li>撤消所有动作：<code>U</code></li>
  <li>恢复：<code>Ctrl+R</code></li>
</ul>

<h2 id="section-5">剪切与复制</h2>

<ul>
  <li>
    <p>剪切：</p>

    <p>其实VIM中的删除操作都是剪切，将当前删除的部分存入寄存器”“，但是仅能缓存上一次的操作内容</p>
  </li>
  <li>
    <p>复制：</p>

    <p>在可视模式下选中需要复制内容，按<code>y</code>，或者在之前指定寄存器。如果需要整行复制，<code>(count)yy</code></p>
  </li>
  <li>
    <p>粘贴：</p>

    <p>在普通模式下：<code>p</code></p>

    <p>不知道有没有人纠结于从VIM中复制文本，此处说明一下VIM的寄存器，VIM中共有9种寄存器，此处仅介绍5种：</p>

    <pre><code>* 无名（unnamed）寄存器：""，上面讲到过来，缓存最后一次操作内容
* 数字（numbered）寄存器："0 - "9，缓存最近操作内容，复制与删除有别
* 具名（named）寄存器："a - "z或"A - "Z，指定时可用
* 选择及拖拽（selection and drop）寄存器："*, "+, "~，可用于与外部应用交互，使用前提为系统剪切板可用
* 模式寄存器（last search pattern）："/，缓存最近的搜索模式
</code></pre>
  </li>
</ul>

<h2 id="section-6">搜索与替换</h2>

<ul>
  <li>
    <p>搜索与替换搜索：</p>

    <p><code>/</code>，从当前光标所在位置向下搜索</p>

    <p><code>？</code>，从当前光标所在位置向上搜索</p>
  </li>
  <li>
    <p>替换：</p>

    <p>此处仅说明最简单的一种情况，在可视模式下选中需要被替换的内容区域，<code>:s/被替换部分/替换部分/gc</code>。最后的gc说明替换模式，g代表全局替换，c代表需要确认</p>
  </li>
</ul>

<h2 id="section-7">保存与退出</h2>
<pre><code>* `:q!` 强制退出，不保存。其中!代表强制
* `:wq` 保存并退出
</code></pre>

<p>注：学习VIM最重要的是善于运用<code>:h</code></p>
]]></content>
  </entry>
  
</feed>
